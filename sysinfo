#!/usr/bin/env lua

local function printf(...) print(string.format(...)) end

local writer_mt = {
    __index = function(t, k)
        return ({
            printf = function(self, ...)
                local prefix = self.prefix or ""
                return table.insert(self, prefix .. string.format(...))
            end
        })[k]
    end
}

local function read(path)
    return assert(io.open(path, "r"), "can't open file: " .. path)
end

local function system(command)
    return assert(io.popen(command, "r"), "can't execute command: " .. command)
end

local function parse(lines, pats)
    local matches = {}
    for line in lines do
        for key, pat in pairs(pats) do
            local m = {string.match(line, pat)}
            if #m > 0 then matches[key] = m end
        end
    end
    return matches
end

local function parse_list(lines, pat, index)
    local matches = {}
    for line in lines do
        local m = {string.match(line, pat)}
        if #m >= index then matches[m[index]] = m end
    end
    return matches
end

local function parse_netdev(f)
    f:read("*l")
    f:read("*l")
    local netdev = parse_list(f:lines(),
                              "^%s*(.+):%s+(%d+)%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+(%d+)",
                              1)
    return netdev
end

local function read_node(path)
    local f = read(path)
    local line = f:read("*l")
    f:close()
    return line
end

local function read_meminfo()
    local f = read("/proc/meminfo")
    local meminfo = parse(f:lines(), {
        ["MemTotal"] = "^MemTotal:%s*(%d+) kB$",
        ["MemAvailable"] = "^MemAvailable:%s*(%d+) kB$",
        ["SwapTotal"] = "^SwapTotal:%s*(%d+) kB$",
        ["SwapFree"] = "^SwapFree:%s*(%d+) kB$",
        ["CommitLimit"] = "^CommitLimit:%s*(%d+) kB$",
        ["Committed_AS"] = "^Committed_AS:%s*(%d+) kB$",
        ["Dirty"] = "^Dirty:%s*(%d+) kB$",
        ["Writeback"] = "^Writeback:%s*(%d+) kB$"
    })
    f:close()
    return meminfo
end

local function read_stat(path)
    local f = read(path)
    local stat = parse(f:lines(), {
        cpu = "^cpu%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)",
        btime = "^btime%s+(%d+)"
    })
    f:close()
    return stat
end

local function read_temp()
    local ok, temp = pcall(read_node,
                           "/sys/devices/virtual/thermal/thermal_zone0/temp")
    if not ok then return nil end
    return temp
end

local function read_df(...)
    local cmd = "df -P"
    for _, mount in ipairs({...}) do
        cmd = cmd .. string.format(" \"%s\"", mount)
    end
    local f = system(cmd)
    f:read("*l")
    local df = parse_list(f:lines(),
                          "^[^%s]+%s+(%d+)%s+(%d+)%s+(%d+)%s+[^%s]+%s+([^%s]+)",
                          4)
    f:close()
    return df
end

local iec_units = {"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"}
local function format_iec(format, x)
    local n, max
    if x > 1 then
        n = math.floor((math.floor(math.log(x) / math.log(2)) - 3) / 10)
    else
        n = 0
    end
    if n < 0 then n = 0 end
    max = #iec_units - 1
    if n > max then n = max end
    return string.format(format, x / math.pow(2.0, n * 10.0), iec_units[n + 1])
end

local function format_loadavg(w, loadavg)
    local function walk(iter)
        local t = {}
        for v in iter do table.insert(t, v) end
        return t
    end
    local s = string.match(loadavg, "^[%d.]+%s+[%d.]+%s+[%d.]+")
    w:printf("%-20s  %s", "System load:", s)
end

local function format_meminfo(w, meminfo)
    local mem_total = tonumber(meminfo["MemTotal"][1]) * 1024.0
    local mem_available = tonumber(meminfo["MemAvailable"][1]) * 1024.0
    local swap_total = tonumber(meminfo["SwapTotal"][1]) * 1024.0
    local swap_free = tonumber(meminfo["SwapFree"][1]) * 1024.0
    local commit_limit = tonumber(meminfo["CommitLimit"][1]) * 1024.0
    local commit = tonumber(meminfo["Committed_AS"][1]) * 1024.0
    local dirty = tonumber(meminfo["Dirty"][1]) * 1024.0
    local writeback = tonumber(meminfo["Writeback"][1]) * 1024.0

    local mem_used = mem_total - mem_available
    local swap_used = swap_total - swap_free
    local usage = mem_used / mem_total
    local dirty_ratio = (dirty + writeback) / mem_available
    local swap_usage
    if swap_total > 0 then swap_usage = swap_used / swap_total end
    local commit_charge = commit / mem_total
    local commit_usage = commit / commit_limit

    w:printf("%-20s  %s / %s (%.0f%%)", "Memory usage:",
             format_iec("%.0f %s", mem_used), format_iec("%.0f %s", mem_total),
             usage * 1e+2)
    w:printf("%-20s  %s + %s (%.0f%%)", "Memory dirty:",
             format_iec("%.0f %s", dirty), format_iec("%.0f %s", writeback),
             dirty_ratio * 1e+2)
    if swap_usage then
        w:printf("%-20s  %s / %s (%.0f%%)", "Swap usage:",
                 format_iec("%.0f %s", swap_used),
                 format_iec("%.0f %s", swap_total), swap_usage * 1e+2)
    end
    w:printf("%-20s  %s < %s (%.0f%%, %.0f%%)", "Commit charge:",
             format_iec("%.0f %s", commit), format_iec("%.0f %s", commit_limit),
             commit_charge * 1e+2, commit_usage * 1e+2)
end

local function format_df(w, df, ...)
    for _, mount in ipairs({...}) do
        local m = df[mount]
        if m then
            local total = tonumber(m[1]) * 1024.0
            local used = tonumber(m[2]) * 1024.0
            local available = tonumber(m[3]) * 1024.0
            local usage = used / total
            if usage < 0.9 then
                usage = string.format("%.1f%%", usage * 1e+2)
            else
                usage = string.format("%.1f%% !", usage * 1e+2)
            end
            w:printf("%-20s  %s / %s (%s)",
                     string.format("Usage of %s:", mount),
                     format_iec("%.2f %s", used), format_iec("%.2f %s", total),
                     usage)
        end
    end
end

local function format_uptime(w, stat, now)
    local btime = tonumber(stat.btime[1])
    local uptime = now - btime
    local days = math.floor(uptime / (24 * 60 * 60))
    uptime = uptime % (24 * 60 * 60)
    local hours = math.floor(uptime / (60 * 60))
    uptime = uptime % (60 * 60)
    local minutes = math.floor(uptime / 60)
    uptime = uptime % 60
    local seconds = uptime
    w:printf("%-20s  %d days, %02d:%02d:%02d", "Uptime:", days, hours, minutes,
             seconds)
end

local function format_temp(w, temp)
    local celsius = temp * 1e-3
    w:printf("%-20s  %.01f C", "Temperature:", celsius)
end
local function print_motd()
    local sysinfo = {
        now = os.time(),
        loadavg = read_node("/proc/loadavg"),
        df = read_df("/", "/home", "/tmp"),
        temp = read_temp(),
        stat = read_stat("/proc/stat"),
        meminfo = read_meminfo("/proc/meminfo")
    }

    print()
    printf("System information as of %s", os.date("%Y-%m-%dT%T%z", now))
    print()

    local w = setmetatable({}, writer_mt)
    format_loadavg(w, sysinfo.loadavg)
    format_meminfo(w, sysinfo.meminfo)
    format_df(w, sysinfo.df, "/", "/home")
    format_uptime(w, sysinfo.stat, sysinfo.now)
    if sysinfo.temp then format_temp(w, sysinfo.temp) end

    for _, line in ipairs(w) do print("  " .. line) end
    print()
end

print_motd()
