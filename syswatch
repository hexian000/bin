#!/usr/bin/env lua

if not table.unpack then
    table.unpack = unpack
end

local function printf(...)
    return print(string.format(...))
end

local function isfinite(x)
    local infinity = math.huge
    if x ~= x or x == infinity or x == -infinity then
        return false
    end
    return true
end

local ldexp = math.ldexp or function(x, ep)
    return x * math.pow(2, ep)
end

local function log(x, base)
    local ln = math.log
    return ln(x) / ln(base)
end

local writer_mt = {
    __index = function(t, k)
        return ({
            printf = function(self, ...)
                local prefix = self.prefix or ""
                return table.insert(self, prefix .. string.format(...))
            end
        })[k]
    end
}

local function read(path)
    return assert(io.open(path, "r"), "can't open file: " .. path)
end

local function system(command)
    return assert(io.popen(command, "r"), "can't execute command: " .. command)
end

local function parse(lines, pats)
    local matches = {}
    for line in lines do
        for key, pat in pairs(pats) do
            local m = {string.match(line, pat)}
            if #m > 0 then
                matches[key] = m
            end
        end
    end
    return matches
end

local function parse_list(lines, pat, index)
    local matches = {}
    for line in lines do
        local m = {string.match(line, pat)}
        if #m >= index then
            matches[m[index]] = m
        end
    end
    return matches
end

local function parse_netdev(f)
    f:read("*l")
    f:read("*l")
    local netdev = parse_list(f:lines(), "^%s*(.+):%s+(%d+)%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+(%d+)", 1)
    return netdev
end

local function read_node(path)
    local f = read(path)
    local line = f:read("*l")
    f:close()
    return line
end

local function read_meminfo()
    local f = read("/proc/meminfo")
    local meminfo = parse(f:lines(), {
        ["MemTotal"] = "^MemTotal:%s*(%d+) kB$",
        ["MemAvailable"] = "^MemAvailable:%s*(%d+) kB$",
        ["SwapTotal"] = "^SwapTotal:%s*(%d+) kB$",
        ["SwapFree"] = "^SwapFree:%s*(%d+) kB$",
        ["CommitLimit"] = "^CommitLimit:%s*(%d+) kB$",
        ["Committed_AS"] = "^Committed_AS:%s*(%d+) kB$",
        ["Dirty"] = "^Dirty:%s*(%d+) kB$",
        ["Writeback"] = "^Writeback:%s*(%d+) kB$"
    })
    f:close()
    return meminfo
end

local function read_stat(path)
    local f = read(path)
    local stat = parse(f:lines(), {
        cpu = "^cpu%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)",
        btime = "^btime%s+(%d+)"
    })
    f:close()
    return stat
end

local function try_nodes(list)
    for _, node in ipairs(list) do
        local ok, value = pcall(read_node, node)
        if ok then
            return node, value
        end
    end
    return nil, nil
end

local function init_temp()
    local value
    temp_node, value = try_nodes({"/sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input",
                                  "/sys/devices/virtual/thermal/thermal_zone0/temp"})
end

local function read_temp()
    if not temp_node then
        return nil
    end
    local ok, temp = pcall(read_node, temp_node)
    if not ok then
        return nil
    end
    return temp
end

local function read_df(...)
    local cmd = "df -P"
    for _, mount in ipairs({...}) do
        cmd = cmd .. string.format(" \"%s\"", mount)
    end
    local f = system(cmd)
    f:read("*l")
    local df = parse_list(f:lines(), "^[^%s]+%s+(%d+)%s+(%d+)%s+(%d+)%s+[^%s]+%s+([^%s]+)", 4)
    f:close()
    return df
end

local iec_units = {"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"}
function format_iec(value)
    if not isfinite(value) or value < 8192.0 then
        return string.format("%.0f %s", value, iec_units[1])
    end
    local x = math.floor((math.floor(log(value, 2)) - 3) / 10)
    local i = math.min(x, #iec_units - 1)
    local v = ldexp(value, i * -10)
    if v < 10.0 then
        return string.format("%.02f %s", v, iec_units[i + 1])
    end
    if v < 100.0 then
        return string.format("%.01f %s", v, iec_units[i + 1])
    end
    return string.format("%.0f %s", v, iec_units[i + 1])
end

local function format_loadavg(w, loadavg)
    local function walk(iter)
        local t = {}
        for v in iter do
            table.insert(t, v)
        end
        return t
    end
    local s = string.match(loadavg, "^[%d.]+%s+[%d.]+%s+[%d.]+")
    w:printf("%-20s  %s", "System load:", s)
end

local function format_meminfo(w, meminfo)
    local mem_total = tonumber(meminfo["MemTotal"][1]) * 1024.0
    local mem_available = tonumber(meminfo["MemAvailable"][1]) * 1024.0
    local swap_total = tonumber(meminfo["SwapTotal"][1]) * 1024.0
    local swap_free = tonumber(meminfo["SwapFree"][1]) * 1024.0
    local commit_limit = tonumber(meminfo["CommitLimit"][1]) * 1024.0
    local commit = tonumber(meminfo["Committed_AS"][1]) * 1024.0
    local dirty = tonumber(meminfo["Dirty"][1]) * 1024.0
    local writeback = tonumber(meminfo["Writeback"][1]) * 1024.0

    local mem_used = mem_total - mem_available
    local swap_used = swap_total - swap_free
    local usage = mem_used / mem_total
    local dirty_ratio = (dirty + writeback) / mem_available
    local swap_usage
    if swap_total > 0 then
        swap_usage = swap_used / swap_total
    end
    local commit_charge = commit / mem_total
    local commit_usage = commit / commit_limit

    w:printf("%-20s  %s / %s (%.0f%%)", "Memory usage:", format_iec(mem_used), format_iec(mem_total), usage * 1e+2)
    w:printf("%-20s  %s + %s (%.0f%%)", "Memory dirty:", format_iec(dirty), format_iec(writeback), dirty_ratio * 1e+2)
    if swap_usage then
        w:printf("%-20s  %s / %s (%.0f%%)", "Swap usage:", format_iec(swap_used), format_iec(swap_total),
            swap_usage * 1e+2)
    end
    w:printf("%-20s  %s < %s (%.0f%%, %.0f%%)", "Commit charge:", format_iec(commit), format_iec(commit_limit),
        commit_charge * 1e+2, commit_usage * 1e+2)
end

local function format_df(w, df, ...)
    for _, mount in ipairs({...}) do
        local m = df[mount]
        if m then
            local total = tonumber(m[1]) * 1024.0
            local used = tonumber(m[2]) * 1024.0
            local available = tonumber(m[3]) * 1024.0
            local usage = used / total
            if usage < 0.9 then
                usage = string.format("%.1f%%", usage * 1e+2)
            else
                usage = string.format("%.1f%% !", usage * 1e+2)
            end
            w:printf("%-20s  %s / %s (%s)", string.format("Usage of %s:", mount), format_iec(used), format_iec(total),
                usage)
        end
    end
end

local function format_uptime(w, stat, now)
    local btime = tonumber(stat.btime[1])
    local uptime = now - btime
    local days = math.floor(uptime / (24 * 60 * 60))
    uptime = uptime % (24 * 60 * 60)
    local hours = math.floor(uptime / (60 * 60))
    uptime = uptime % (60 * 60)
    local minutes = math.floor(uptime / 60)
    uptime = uptime % 60
    local seconds = uptime
    w:printf("%-20s  %d days, %02d:%02d:%02d", "Uptime:", days, hours, minutes, seconds)
end

local function format_temp(w, temp)
    local celsius = temp * 1e-3
    w:printf("%-20s  %.01f C", "Temperature:", celsius)
end
local function read_cpufreq()
    local f = read("/sys/devices/system/cpu/cpufreq/policy0/stats/time_in_state")
    local cpufreq = parse_list(f:lines(), "^(%d+)%s+(%d+)", 1)
    f:close()
    return cpufreq
end

local function read_block(...)
    local block = {}
    for _, dev in ipairs({...}) do
        local ok, line = pcall(read_node, string.format("/sys/block/%s/stat", dev))
        if ok then
            block[dev] =
                {string.match(line, "^%s*%d+%s+%d+%s+(%d+)%s+%d+%s+%d+%s+%d+%s+(%d+)%s+%d+%s+%d+%s+%d+%s+(%d+)")}
        end
    end
    return block
end

local function sleep(seconds)
    local f = system(string.format("sleep %d", seconds))
    f:read("*all")
    f:close()
end

local function format_loadavg(w, loadavg)
    local function walk(iter)
        local t = {}
        for v in iter do
            table.insert(t, v)
        end
        return t
    end
    local s = table.concat(walk(string.gmatch(loadavg, "[%d.]+")), " ", 1, 3)
    w:printf("%-20s  %s", "System load:", s)
end

local function format_meminfo(w, meminfo)
    local mem_total = tonumber(meminfo["MemTotal"][1]) * 1024.0
    local mem_available = tonumber(meminfo["MemAvailable"][1]) * 1024.0
    local swap_total = tonumber(meminfo["SwapTotal"][1]) * 1024.0
    local swap_free = tonumber(meminfo["SwapFree"][1]) * 1024.0
    local commit_limit = tonumber(meminfo["CommitLimit"][1]) * 1024.0
    local commit = tonumber(meminfo["Committed_AS"][1]) * 1024.0
    local dirty = tonumber(meminfo["Dirty"][1]) * 1024.0
    local writeback = tonumber(meminfo["Writeback"][1]) * 1024.0

    local mem_used = mem_total - mem_available
    local swap_used = swap_total - swap_free
    local usage = mem_used / mem_total
    local dirty_ratio = (dirty + writeback) / mem_available
    local swap_usage
    if swap_total > 0 then
        swap_usage = swap_used / swap_total
    end
    local commit_charge = commit / mem_total
    local commit_usage = commit / commit_limit

    w:printf("%-20s  %s / %s (%.0f%%)", "Memory usage:", format_iec("%.0f %s", mem_used),
        format_iec("%.0f %s", mem_total), usage * 1e+2)
    w:printf("%-20s  %s + %s (%.0f%%)", "Memory dirty:", format_iec("%.0f %s", dirty), format_iec("%.0f %s", writeback),
        dirty_ratio * 1e+2)
    if swap_usage then
        w:printf("%-20s  %s / %s (%.0f%%)", "Swap usage:", format_iec("%.0f %s", swap_used),
            format_iec("%.0f %s", swap_total), swap_usage * 1e+2)
    end
    w:printf("%-20s  %s < %s (%.0f%%, %.0f%%)", "Commit charge:", format_iec("%.0f %s", commit),
        format_iec("%.0f %s", commit_limit), commit_charge * 1e+2, commit_usage * 1e+2)
end

local function format_df(w, df, ...)
    for _, mount in ipairs({...}) do
        local m = df[mount]
        if m then
            local total = tonumber(m[1]) * 1024.0
            local used = tonumber(m[2]) * 1024.0
            local available = tonumber(m[3]) * 1024.0
            local usage = used / total
            if usage < 0.9 then
                usage = string.format("%.1f%%", usage * 1e+2)
            else
                usage = string.format("%.1f%% !", usage * 1e+2)
            end
            w:printf("%-20s  %s / %s (%s)", string.format("Usage of %s:", mount), format_iec("%.2f %s", used),
                format_iec("%.2f %s", total), usage)
        end
    end
end

local function format_uptime(w, stat, now)
    local btime = tonumber(stat.btime[1])
    local uptime = now - btime
    local days = math.floor(uptime / (24 * 60 * 60))
    uptime = uptime % (24 * 60 * 60)
    local hours = math.floor(uptime / (60 * 60))
    uptime = uptime % (60 * 60)
    local minutes = math.floor(uptime / 60)
    uptime = uptime % 60
    local seconds = uptime
    w:printf("%-20s  %d days, %02d:%02d:%02d", "Uptime:", days, hours, minutes, seconds)
end

local function format_netdev(w, current, previous, dt, ...)
    for _, dev in ipairs({...}) do
        local m0, m1 = previous[dev], current[dev]
        if m0 and m1 then
            local title = string.format("Net %s:", dev)
            local rx = (tonumber(m1[2]) - tonumber(m0[2])) / dt
            local tx = (tonumber(m1[3]) - tonumber(m0[3])) / dt
            w:printf("%-20s  Rx    %12s, Tx    %12s", title, format_iec("%.0f %s/s", rx), format_iec("%.0f %s/s", tx))
        end
    end
end

local function format_block(w, current, previous, dt, ...)
    local sector = 512
    for _, dev in ipairs({...}) do
        local m0, m1 = previous[dev], current[dev]
        if m0 and m1 then
            local title = string.format("Block %s:", dev)
            local read = (tonumber(m1[1]) - tonumber(m0[1])) * sector / dt
            local write = (tonumber(m1[2]) - tonumber(m0[2])) * sector / dt
            local wait = (tonumber(m1[3]) - tonumber(m0[3])) / dt
            w:printf("%-20s  Read  %12s, Write %12s, Wait  %12s", title, format_iec("%.0f %s/s", read),
                format_iec("%.0f %s/s", write), string.format("%.0f ms", wait))
        end
    end
end

local function format_cpustat(w, current, previous, dt)
    local d = {}
    for i in ipairs(current) do
        table.insert(d, current[i] - previous[i])
    end
    local user, nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice = table.unpack(d)
    local total = user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice
    local title = "CPU Total:"
    local busy = (total - idle) / total
    w:printf("%-20s  Time  %12s", title, string.format("%.01f %%", busy * 100.0))
end

local function init()
    init_temp()
end

local function sample()
    return {
        now = os.time(),
        loadavg = read_node("/proc/loadavg"),
        temp = read_temp(),
        df = read_df("/", "/home", "/tmp"),
        stat = read_stat("/proc/stat"),
        meminfo = read_meminfo("/proc/meminfo"),
        netdev = parse_netdev(read("/proc/net/dev")),
        block = read_block("mmcblk0", "nvme0n1", "sda", "vda")
    }
end

local function render(current, previous)
    print()
    printf("System information as of %s", os.date("%Y-%m-%dT%T%z", now))
    print()

    local w = setmetatable({
        prefix = "  "
    }, writer_mt)
    format_loadavg(w, current.loadavg)
    format_meminfo(w, current.meminfo)
    format_df(w, current.df, "/", "/home")
    format_uptime(w, current.stat, current.now)
    if current.temp then
        format_temp(w, current.temp)
    end
    local dt = current.now - previous.now
    if dt > 0 then
        format_cpustat(w, current.stat.cpu, previous.stat.cpu, dt)
        format_netdev(w, current.netdev, previous.netdev, dt, "eth0", "wlan0")
        format_block(w, current.block, previous.block, dt, "mmcblk0", "nvme0n1", "sda", "vda")
    end

    for _, line in ipairs(w) do
        print(line)
    end
    print()
end

function main()
    init()
    local current, previous
    current = sample()
    repeat
        sleep(2)
        current, previous = sample(), current
        render(current, previous)
    until false
end
main()
